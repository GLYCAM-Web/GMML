#!/bin/bash

##### PRETTY PRINT STUFF #####
#lazy and dont want to have to type all these color variables a bunch, also improves readability
RESET_STYLE='\033[0m'
GREEN_BOLD='\033[0;32m\033[1m'
YELLOW_BOLD='\033[0;33m\033[1m'
RED_BOLD='\033[0;31m\033[1m'

##### HELPFUL STUFF #####
GMML_ROOT_DIR=$(git rev-parse --show-toplevel)

cp -r "${GMML_ROOT_DIR}"/.hooks/* "${GMML_ROOT_DIR}"/.git/hooks/

TO_CHECK_LIST=($(git diff --cached --name-only -- "*.hpp" -- "*.h" -- "*.cpp" -- "*.c" -- "*.cc" --diff-filter=ACM))

FAILED_FILES=()
PASSED_FILES=()
check_formatting()
{
    echo -e "\n${YELLOW_BOLD}Begin format enforcement checking...${RESET_STYLE}"

    #make temp dir in our gmml directory so we dont have to deal with perm problems in the tmp dirs or w/e
    #When debugging this script i would run into problems where stuff would act wonky, used this method
    #cause I got sick of trying to hunt down the actual problem why my code wasnt behaving as I expected
    TEMP_DIR=$(mktemp -d -p "${GMML_ROOT_DIR}")
    echo -e "\n${YELLOW_BOLD}Created temporary dir to hold checked files...${RESET_STYLE}\n\tDir Name: ${TEMP_DIR}\n"
    for FILE_CHECKING in "${TO_CHECK_LIST[@]}"; do

        #make the temp file of what we be checking. Extracts the filename with extension that we be checking also
        #in case we gotta add debug/info type ish in the future
        TEMP_FILE=$(mktemp "${TEMP_DIR}"/"${FILE_CHECKING##*/}".XXXXXX)

        (git show :"${FILE_CHECKING}") >"${TEMP_FILE}"
        clang-format-15 --dry-run --Werror "${TEMP_FILE}" 2>/dev/null
        if [ $? == 0 ]; then
            PASSED_FILES+=("${FILE_CHECKING}")
        else
            FAILED_FILES+=("${FILE_CHECKING}")
        fi
        rm "${TEMP_FILE}"
    done
    rm -r "${TEMP_DIR}"

    for SUCCEDER in "${PASSED_FILES[@]}"; do
        echo -e "${GREEN_BOLD}FILE PASSED: ${RESET_STYLE}${SUCCEDER}"
    done

    if [ ${#FAILED_FILES[@]} == 0 ]; then
        echo -e "\n${GREEN_BOLD}PASSED: ALL FILES FORMATTED CORRECTLY. COMMIT ACCEPTED.${RESET_STYLE}\n"
        exit
    fi

    echo -e "\n${RED_BOLD}ERROR: ${#FAILED_FILES[@]} FILE(S) FAILED FORMAT CHECKING. COMMIT DENIED${RESET_STYLE}"

    for FAILURE in "${FAILED_FILES[@]}"; do
        echo -e "${RED_BOLD}FILE FAILED: ${RESET_STYLE}${FAILURE}\n"

    done
    echo -e "Please run \"clang-format-15 -i file/path/here.cpp\" on each of the failed files.\nSometimes clang-format messes up on comment blocks so just use multiline comments instead.\n\nDont forget to readd your files!\n"
    exit 1
}

check_formatting
